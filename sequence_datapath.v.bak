`timescale 1ns/1ns

module sequence_datapath (clock, enRandomSet, enRandomLoad1, enStoreRandom, enRandomRead, toCompare, readOut);




	
	input clock;
	input enRandomSet, enRandomLoad1, enStoreRandom, enRandomRead;
	wire randomWire;
	wire [14:0]sequenceWire;
	output [14:0]toCompare;
	output [2:0]readOut;
	
	generateRandoms randoms(.reset(enRandomSet), .clock(clock), .out(randomWire), .load1(enRandomLoad1);
	sequenceReg sequenceReg1 (.enable(enStoreRandom), .random(randomWire), .clock(clock), .sequenceIn(sequenceWire), .toCompareOut(toCompare));
	readOut3bit read1(.sequenceIn(sequenceWire), .clock(clock), .enable(enRandomRead), .out(readOut));

	
endmodule


module sequenceReg (enable, random, clock, sequenceIn, toCompareOut);


			
        	input enable;
        	input clock;
        	input random;
        	output reg [14:0] sequenceIn;
			output [14:0] toCompareOut;
			assign toCompareOut=sequenceIn;
        	always@(posedge clock)
				begin
     
					if (enable) begin
						sequenceIn[14]=random;
						sequenceIn = sequenceIn >> 1;             	
						end
					else sequenceIn<=sequenceIn;
				end
				
				
		
			
endmodule

module readOut3bit (sequenceIn, clock, enable, out);

        	input [14:0] sequenceIn;
        	input clock;
        	input enable;
        	output reg [2:0] out;
        	reg [14:0] toBeRead;
			output [6:0]toHEX0;

        	always @ (posedge clock)
                    	begin
        
                    	if(~enable) begin
                                	out<=3'b000;
                                	toBeRead<=sequenceIn;
							end
                    	else if(enable) begin
                                	out<=toBeRead[2:0];
                                	toBeRead<=toBeRead >> 3;

                                	end
							else out<=out;
                    	end
							

endmodule

module generateRandoms(reset, clock, out, load1);

		input reset;
        	input clock;
		input load1;
        	output out;
 
		wire w1to2, w2to3, w3to4, w4toXOR, XORtoIn;
			
			shiftReg SR1(.reset(reset), .clock(clock), .in(XORtoIn), .out(w1to2));
			
			shiftReg SR2(.reset(reset), .clock(clock), .in(w1to2), .out(w2to3));
			
			shiftReg SR3(.reset(reset), .clock(clock), .in(w2to3), .out(w3to4), .load(load1));
			
			shiftReg SR4(.reset(reset), .clock(clock), .in(w3to4), .out(w4toXOR));


		assign XORtoIn = (w4toXOR ^ w3to4);
		assign out = w4toXOR;
 
 
 
endmodule
 
module shiftReg(reset, clock, in, out, load);
 
		input reset;
        	input clock;
        	input in;
		input load;
        	output reg out;
			
 
        	always@(posedge clock)
                    	begin
						if(load==1'b1)
							out<=load;
						else if(~reset)
							out<=1'b0;
			
						else
                    		out<=in;
                    	end
							
endmodule


module decoder7segment (inputs, outwire);
	
	input [3:0] inputs;
	output reg [6:0] outwire;
		
	always@(*)
	
		begin
			case (inputs)
			
				4'b0000 : outwire = 7'b1000000;
				4'b0001 : outwire = 7'b1111001;
				4'b0010 : outwire = 7'b0100100;
				4'b0011 : outwire = 7'b0110000;
				4'b0100 : outwire = 7'b0011001;
				4'b0101 : outwire = 7'b0010010;
				4'b0110 : outwire = 7'b0000010;
				4'b0111 : outwire = 7'b1111000;
				4'b1000 : outwire = 7'b0000000;
				4'b1001 : outwire = 7'b0011000;
				4'b1010 : outwire = 7'b0001000;
				4'b1011 : outwire = 7'b0000011;
				4'b1100 : outwire = 7'b1000110;
				4'b1101 : outwire = 7'b0100001;
				4'b1110 : outwire = 7'b0000110;
				4'b1111 : outwire = 7'b0001110;
				
				default : outwire = 7'b1111111;
				
			endcase
			
		end
	
endmodule
